[{"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\index.js":"1","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\reportWebVitals.js":"2","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\App.js":"3","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\betTracker.jsx":"4","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\BetTracker.jsx":"5","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\Leaderboard.jsx":"6","C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\BetSubmitter.jsx":"7"},{"size":535,"mtime":1697597842606,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1697597843018,"results":"10","hashOfConfig":"9"},{"size":1044,"mtime":1697774211623,"results":"11","hashOfConfig":"9"},{"size":833,"mtime":1697604268988,"results":"12","hashOfConfig":"9"},{"size":4707,"mtime":1697767520229,"results":"13","hashOfConfig":"9"},{"size":1359,"mtime":1697774031028,"results":"14","hashOfConfig":"9"},{"size":1540,"mtime":1697776421160,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1btdfxp",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\index.js",[],[],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\reportWebVitals.js",[],[],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\App.js",["39","40","41","42","43","44"],[],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\betTracker.jsx",["45"],[],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\BetTracker.jsx",["46","47","48"],[],"import './App.css'\r\nimport { useState } from 'react'\r\n\r\n\r\nconst tableHeaders = ['Time', 'Sport', 'Odds', 'Stake', 'Outcome', 'Win/Loss Button']\r\nconst tl = tableHeaders.map(word => word.toLowerCase())\r\ntl[tl.length-1] = 'confirmer'\r\n\r\nconst htmlHeaders = tableHeaders.map(word => <th>{word}</th>)\r\n\r\nfunction dataGen(dataArray, columns) {\r\n    let obj = {}\r\n    for (let i=0; i<5; i++) {\r\n        obj[columns[i]] = dataArray[i]\r\n    }\r\n    return obj\r\n}\r\nconst data0 = dataGen(['Tueday', 'NFL', '1.5', '400', 'PENDING', '--'], tl)\r\nconst data1 = dataGen(['Tueday', 'NFL', '3.5', '100', 'WIN', '--'], tl)\r\nconst data2 = dataGen(['Monday', 'NBA', '3', '50', 'PENDING', '--'], tl)\r\nconst data3 = dataGen(['Monday', 'NBA', '5', '200', 'WIN', '--'], tl)\r\nconst data4 = dataGen(['Friday', 'NFL', '2.5', '100', 'LOSE', '--'], tl)\r\nconst data5 = dataGen(['Thursday', 'NBA', '4', '150', 'WIN', '--'], tl)\r\n\r\nconst data = [data0, data1, data2, data3, data4, data5]\r\n\r\n\r\n// Function to filter data based on options selected\r\nfunction dataFilter(array, type, option) {\r\n    \r\n    if (option == 'All') {\r\n        return array\r\n    }\r\n    else {\r\n        const newData = []\r\n        for (let i=0; i<array.length; i++) {\r\n            if (array[i][type] == option) {\r\n                newData.push(array[i])\r\n            }\r\n        } \r\n        return newData\r\n    }\r\n}\r\n\r\n\r\nfunction BetTracker() {\r\n    const sportOptions = ['All', 'NFL', 'NBA']\r\n    const outcomeOptions = ['All', 'WIN', 'LOSE', 'PENDING']\r\n    const pendingOptions = ['PENDING', 'WIN', 'LOSE']\r\n    const [sport, setSport] = useState(sportOptions[0])\r\n    const [outcome, setOutcome] = useState(outcomeOptions[0])\r\n    \r\n\r\n    // data to be displayed depends on filters\r\n    let displayData = dataFilter(data, 'sport', sport)\r\n    displayData = dataFilter(displayData, 'outcome', outcome)\r\n\r\n    \r\n\r\n    // create buttons for pending\r\n    for (let i=0; i<displayData.length; i++) {\r\n        if (data[i].outcome == 'PENDING') {\r\n            data[i].confirmer = true\r\n        }\r\n    }\r\n    const [pending, setPending] = useState(Array(displayData.length).fill(pendingOptions[0]))\r\n    console.log(pending)\r\n    \r\n    // updates pending array\r\n    function arrayUpdater(val, array, index) {\r\n        const newArray = [...array]\r\n        newArray[index] = val\r\n        setPending(newArray)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <div class=\"optionsArea\">\r\n                <span class=\"optionType\">\r\n                    <h2>Filter by sport</h2>\r\n                    <select value={sport} onChange={(event) => setSport(event.target.value)}>\r\n                        {sportOptions.map((option, index) => (\r\n                        <option key={index} value={option}>\r\n                            {option}\r\n                        </option>\r\n                        ))}\r\n                    </select>\r\n                    <p>Selected Option: {sport}</p>\r\n                </span>\r\n                <span class=\"optionType\">\r\n                    <h2>Filter by outcome</h2>\r\n                    <select value={outcome} onChange={(event) => setOutcome(event.target.value)}>\r\n                        {outcomeOptions.map((option, index) => (\r\n                        <option key={index} value={option}>\r\n                            {option}\r\n                        </option>\r\n                        ))}\r\n                    </select>\r\n                    <p>Selected Option: {outcome}</p>\r\n                </span>\r\n                \r\n            </div>\r\n            \r\n            <table>\r\n                <tr>\r\n                    {htmlHeaders}\r\n                </tr>\r\n                {displayData.map((val, key) => {\r\n                    return (\r\n                        <tr key={key}>\r\n                            <td>{val[tl[0]]}</td>\r\n                            <td>{val[tl[1]]}</td>\r\n                            <td>{val[tl[2]]}</td>\r\n                            <td>{val[tl[3]]}</td>\r\n                            <td>{val[tl[4]]}</td>\r\n                            <td>{val[tl[5]] && \r\n                                <select value={pending[key]} onChange={(event) => arrayUpdater(event.target.value, pending, key)}>\r\n                                    {pendingOptions.map((option, index) => (\r\n                                    <option key={index} value={option}>\r\n                                        {option}\r\n                                    </option>\r\n                                    ))}\r\n                                </select>}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BetTracker",["49"],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\Leaderboard.jsx",["50"],[],"C:\\Users\\ausra\\OneDrive\\Desktop\\Wicky\\tracka-prototype\\src\\BetSubmitter.jsx",["51","52","53","54"],[],{"ruleId":"55","severity":1,"message":"56","line":30,"column":13,"nodeType":"57","messageId":"58","endLine":30,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":31,"column":13,"nodeType":"57","messageId":"58","endLine":31,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":32,"column":13,"nodeType":"57","messageId":"58","endLine":32,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":33,"column":13,"nodeType":"57","messageId":"58","endLine":33,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":34,"column":13,"nodeType":"57","messageId":"58","endLine":34,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":35,"column":13,"nodeType":"57","messageId":"58","endLine":35,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":4,"column":7,"nodeType":"61","messageId":"62","endLine":4,"endColumn":11},{"ruleId":"55","severity":1,"message":"56","line":31,"column":16,"nodeType":"57","messageId":"58","endLine":31,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":37,"column":32,"nodeType":"57","messageId":"58","endLine":37,"endColumn":34},{"ruleId":"55","severity":1,"message":"56","line":62,"column":29,"nodeType":"57","messageId":"58","endLine":62,"endColumn":31},{"ruleId":"63","replacedBy":"64"},{"ruleId":"59","severity":1,"message":"65","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":18},{"ruleId":"59","severity":1,"message":"66","line":7,"column":12,"nodeType":"61","messageId":"62","endLine":7,"endColumn":16},{"ruleId":"59","severity":1,"message":"67","line":7,"column":18,"nodeType":"61","messageId":"62","endLine":7,"endColumn":25},{"ruleId":"59","severity":1,"message":"68","line":8,"column":12,"nodeType":"61","messageId":"62","endLine":8,"endColumn":17},{"ruleId":"59","severity":1,"message":"69","line":8,"column":19,"nodeType":"61","messageId":"62","endLine":8,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-new-object",["70"],"'useState' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","no-object-constructor"]